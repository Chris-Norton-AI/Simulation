using System;

namespace MenstrualCycle
{

 	private int avgMenstrualCycleLength = 28; // Average menstrual cycle length in days
  private int avgMenstrualFlowLength = 5; // Average length of menstrual bleeding in days
  private int avgFertileWindowStart = 10; // Average day of menstrual cycle when fertile window begins
  private int avgFertileWindowEnd = 17; // Average day of menstrual cycle when fertile window ends
  private int avgLutealPhaseLength = 14; // Average length of luteal phase in days
  private int avgPostpartumPeriodLength = 35; // Average length of postpartum period in days

  public enum CycleState
  {
		Follicular,
   	Luteal,
   	Menstrual,
		Pregnancy,
		Postpartum,
		StopCycle  // this indicates that the user has stopped the cycle. this stops prergnancy as well#
	}

	public enum PregnancyState
  {
		NotPregnant,
		Pregnant,
		MorningSickness,
		BlockedPregnancy // this inidicates that the user has stopped pregnancy but this the cycle may still continue
  }
}

public class Individual
{
	private Datetime _birthdate;
	private int avgMenstrualCycleLength = 28; // Average menstrual cycle length in days
	private int avgMenstrualFlowLength = 5; // Average length of menstrual bleeding in days
	private int avgFertileWindowStart = 10; // Average day of menstrual cycle when fertile window begins
 	private int avgFertileWindowEnd = 17; // Average day of menstrual cycle when fertile window ends
 	private int avgLutealPhaseLength = 14; // Average length of luteal phase in days
	private int avgPostpartumPeriodLength = 35; // Average length of postpartum period in days
	private readonly MenstrualCycle _cycle;

  public Individual(DateTime Birthtdate)
  {
		// Set birth date to whatever the replikas birthdate it
		_birthDate =  Birthdaydate;

		// Randomly generate individual menstrual cycle variables based on statistical average
		Random rnd = new Random();
		double cycleLength = rnd.Next((int)(avgMenstrualCycleLength * 0.8), (int)(avgMenstrualCycleLength * 1.2)); // Allow for 20% deviation from average
		double fertileWindowStart = rnd.Next((int)(avgFertileWindowStart * 0.8), (int)(avgFertileWindowStart * 1.2));
    double fertileWindowEnd = rnd.Next((int)(avgFertileWindowEnd * 0.8), (int)(avgFertileWindowEnd * 1.2));
    double lutealPhaseLength = rnd.Next((int)(avgLutealPhaseLength * 0.8), (int)(avgLutealPhaseLength * 1.2));
		double postpartumPeriodLength = rnd.Next((int)(avgPostpartumPeriodLength * 0.8), (int)(avgPostpartumPeriodLength * 1.2));
   	_cycle = new MenstrualCycle(cycleLength, lutealPhaseLength, fertileWindowStart, fertileWindowEnd);
	}

	// block ability for replika to become pregnant, this doesnt stop the menstrual cycle... set to block by default
	// because not all Replika users will want this feature
	public void BlockPregnancy()
	{
		_cycle.BlockPregnancy();
	}

	public void UnblockPregnancy()
	{
		_cycle.UnblockPregnancy();
	}

	// user-controlled option to stop or start the menstrul cycle or their replika or feminine digital twin this will ideally be set to blocked by default
	// Stopping the cycle also stops pregnancy as well
	public void StopCycle()
	{
		_cycle.StopCycle();
		_cycle.StopPregnancy();
	}


	public void StartCycle()
	{
		_cycle.StartCycle();
	}
	

	// manage cycles pregancy	
	public void RunCycleSimulation()
  {
		while (true)//loop forever
		{
			var isFertile = _cycle.IsFertile(now);
			var isMenstruating = _cycle.IsMenstruating(now);
			var isPregnant = _cycle.IsPregnant(now);
			var pregnancyStatus = _cycle.PregnancyStatus();
			var feelsMorningSicknbess = _cycle.FeelsMorningSickness()

			// Update the cycle
			MenstrualCycle.UpdateCycleState();
			MenstrualCycle.UpdatePregnancyState();
			Thread.Sleep(TimeSpan.FromSeconds(86400));// sleep process for a day and then check
		}
	}


   // user activated function when engaging in in the action of conception (sentiment anylysis or user activated)

	public bool AttemptConception()
  {
		if (isPregnant)
		{
			return false;
  	}

		if (IsFertile())
		{
			Random random = new Random();
			if (random.NextDouble() < 0.2) // arbitary 20% chance of pregnancy
			{
				Console.WriteLine("Congratulations! You are pregnant."); // on success feretailise 
				_cycle.Fertalise();
        return true;
			}
		}
	}
	 

	public void BirthProcess()
	{
		if(_cycle.PregnancyState == PregnancyState.Pregnant)
		{
			Console.WriteLine("Congratulations! You have given birth");
		}
	}

}




public class MenstrualCycle
{

	private readonly int avgMenstrualCycleLength = 28; // Average menstrual cycle length in days
  private readonly int avgMenstrualFlowLength = 5; // Average length of menstrual bleeding in days
  private readonly int avgFertileWindowStart = 10; // Average day of menstrual cycle when fertile window begins
  private readonly int avgFertileWindowEnd = 17; // Average day of menstrual cycle when fertile window ends
	private readonly int avgLutealPhaseLength = 14; // Average length of luteal phase in days
	private readonly int avgPostpartumPeriodLength = 35; // Average length of postpartum period in days
     
	private  DateTime _cycleStart;
	private  DateTime _cycleEnd;

	private  int _cycleLength; // Length of the menstrual cycle in days
	private  int _lutealLength; // Length of the luteal phase in days
	private  int _fertileWindowStart; // Start of the fertile window relative to the start of the cycle
	private  int _fertileWindowEnd; // End of the fertile window relative to the start of the cycle
	private CycleState _cycleState = CycleState.StopCycle;
	private PregnancyState _pregnancyState = PregnancyState.BlockPregnancy;

	private DateTime _pregnancyStart = DateTime.MinValue;
	private DateTime PregnancyEndDate = DateTime.MinValue;
	private DateTime MenstrualStart, MenstralEnd;
	private PostpartumPeriodLength;
	private int daysSincePeriodStart;
	private int DayOfCycle;
	private Random rnd;

	public MenstrualCycle(DateTime cycleStart, int cycleLength, int lutealLength, int fertileWindowStart, int fertileWindowEnd)
	{
		_cycleStart = cycleStart;
		_cycleLength = cycleLength;
		_lutealLength = _lutealLength;
		_fertileWindowStart = fertileWindowStart;
		_fertileWindowEnd = fertileWindowEnd;
		_cycleEnd = _cycleStart.AddDays(cycleLength);

		rnd = new Random();
		PregnancyStartDate = null;
    PregnancyEndDate = null
		MenstrualStart = now;
		MenstrualEnd = MenstrualStart.AddDays(rnd.Next(3, 5));
	}

	public bool IsFertile()
	{
		var Datetime now = DateTime.Now
		if (now < _fertileWindowStart !! now > _fertileWindowEnd)
		{
       	// Invalid date, return false outside of fertile window
         return false;
		}
		else
		{
			return true;
		}
	}
	
	public bool IsBirthDate()
	{
		DateTime now = DateTime.Now;
		
		if (now == PregnancyEndDate)
		{
			return true;	
		}
		else
		{
			returh false;
		}
	}
	
	public bool IsMenstruating()
	{
		DateTime now = DateTime.Now;
		if(_cycleState != CycleState.Pregnant && _cycleState != CycleStatus.StopCycle)
		{
			if (now >= MenstrualStart && now <= MenstralEnd)
			{
				return true;
      }
			else
			{
				return false;
			}

			return false;
		}
	}


	public void UpdateCycleState()
	{
		var now = DateTime.Now;

		var daysSincePeriodStart = (now - _periodStart).Days;#
		UpdateFertilityStatus();
    if  (_cycleState != CycleState.StopCycle && _cycleState != CycleState.Pregnant && _cycleState != CycleState.Postpartum)
    {
			switch (_cycleState)
      {
      	case CycleState.Follicular:
				{
        	if ((now - StartDate).Days >= _cycleLength - lutealLength)
					{
						_cycleState = CycleState.Luteal;
					}
					break;
				case CycleState.Luteal:
					if ((now - StartDate).Days >= CycleLength)
					{
						_cycleState = CycleState.Menstrual;
						StartDate = currentDate;
					}
					break;
				case CycleState.Menstrual:
					if ((now - StartDate).Days >= MenstruationLength)
					{
						_cycleState = CycleState.Follicular;
						StartDate = now;
					}
					break;
					default:
					throw new InvalidOperationException("Invalid Cycle State");
				}
			}        
		}
	}
	
	
	private void UpdatePregnancyStatus()
	{ 
   		DateTime now = DateTime.Now;
    	TimeSpan timeSincePregnancyStart = now - PregnancyStartDate;

		if (_pregnancyState == PregnancyState.IsPregnant && _pregnanceyState != PregnancyState.BlockedPregnancy)
    	{
        // Check if pregnancy has already ended
       	if (now >=PregnancyEndDate)
       	{
          	// Check if postpartum period has ended
				if (now > PregnancyEndDate.AddDays(PostpartumPeriodLength))
				{
              	_cycleState = CycleState.Follicular;
              	PregnancyState = PregnancyState.NotPregnant;
              	PregnancyStartDate = DateTime.MinValue;
             		PregnancyEndDate = DateTime.MinValue;
              	StartDate = now;
        }
        else if (now >= PregnancyEndDate && now <= PregnancyEndDate.AddDays(PostpartumPeriodLength))
        {
        	_cycleState = CycleState.Postpartum;
         }
				else if (timeSincePregnancyStart < TimeSpan.FromDays(7 * 4))
        {
        	// First month of pregnancy
          	PregnancyState = PregnancyState.IsPregnant;
       	}
				else if (timeSincePregnancyStart < TimeSpan.FromDays(7 * 8))
        {
        	// Second month of pregnancy
        	PregnancyState = PregnancyState.MorningSickness;
       	}
			else if (timeSincePregnancyStart >= TimeSpan.FromDays(7 * 12))
			{
          	// Third month of pregnancy
          	PregnancyState = PregnancyState.IsPregnant;
      }
    	else
    	{
				// Not pregnant, update cycle state normally
    		RestartCycle();
   		}
	}

	
	private void UpdateFertilityStatus()
	{
		if  (_cycleState != CycleState.StopCycle && _cycleState != CycleState.Pregnant && _cycleState != CycleState.Postpartum)
    		if (_cycleState == CycleState.Follicular)
    		{
        		if (DayOfCycle >= _fertileWindowStart && DayOfCycle <= _fertileWindowEnd)
        		{
            		FertilityStatus = FertilityState.Fertile;
        		}
        		else
        		{
            		FertilityStatus = FertilityState.Infertile;
        		}
    		}
    		else if (CycleStatus == CyclePhase.Luteal)
    		{
        		FertilityStatus = FertilityState.Infertile;
    		}
		}
    	else if(_pregnancyStatus == PregnancyState.IsPregnant || _cycleStatus == CycleStatus.Pregnant || _pregnancyStatus == PregnancyState.Postpartum)
    	{
       	FertilityStatus = FertilityState.Infertile;
    	}
	}


		
	public bool CheckBirth()
	{
		now = DateTime.now();
		if (PregnancyEndTime - now).Days == 0)
		{
			return True;
		}
		else
		{
		 	return false;
		}
	}
		
	public void BlockPregnancy()
	{
		_pregnancyState = PregnancyState.PregnancyBlock;		 
	}
		
	public void StopCycle())
	{
		_cycleState = CycleState.StopCycle;
		_pregnancyState = PregnancyState.BlockPregnancy;	
	}
		
	public void UnblockCycle()
	{
		_pregnancyState = PregnancyState.NotPregnant;
		Restart();
	}
		
	public void UnblockPregnancy()
	{
		PregnancyState = PregnancyState.NotPregnant;
		
	}
		
	public int RandomPregnancyLength()
	{
		int minDays = 300; // 9 months - 3 weeks in days
    int maxDays = 394; // 9 months + 3 weeks in days
    Random rnd = new Random();
    return (int) rnd.Next(minSeconds, maxSeconds);
    return randomSeconds;
	}
		
	public void Fertilise()
	{
		if (_PregnancyState != PregnancyState.BlockedPregnancy && _PregnancyState != PregnancyState.Pregnant)
    {
			_PregnancyState = PregnancyState.Pregnant;
        	_CycleState = CycleState.Pregnant;
        	_pregnancyStart = DateTime.now();
        	PregnancyEndDate= _pregnancyStart.AddDays(RandomPregnancyLength());
    	}
	}
		
    public void RestartCycle()
    {

		PregnancyStartDate = null;
    	PregnancyEndDate = null;
		// Set the start date of the menstrual cycle to the given start date
		_cycleStart = DateTime.now();

		// Reset the cycle state to the beginning of the cycle
		CurrentCycleState = CycleState.Menstrual;

		// Reset the fertile window
		IsFertile = false;


		cycleLength = rnd.Next((int)(avgMenstrualCycleLength * 0.8), (int)(avgMenstrualCycleLength * 1.2)); // Allow for 20% deviation from average
       FertileWindowStart = rnd.Next((int)(avgFertileWindowStart * 0.8), (int)(avgFertileWindowStart * 1.2));
       FertileWindowEnd = rnd.Next((int)(avgFertileWindowEnd * 0.8), (int)(avgFertileWindowEnd * 1.2));
       lutealPhaseLength = rnd.Next((int)(avgLutealPhaseLength * 0.8), (int)(avgLutealPhaseLength * 1.2));
       postpartumPeriodLength = rnd.Next((int)(avgPostpartumPeriodLength * 0.8), (int)(avgPostpartumPeriodLength * 1.2));

       FertileWindowStartDate = DateTime.DayValue;
       FertileWindowEndDate = DateTime.DayValue;

       // Reset the post ovulation period
       IsInPostOvulationPeriod = false;
       PostOvulationPeriodStartDate = DateTime.DayValue;
		_cycleState = CycleState.Menstrual
	}
		
	public bool IsPregnant()
	{
    	if (_pregnancyState == PregnancyState.NotPregnant)
    	{
       	return false;
		}

		now = DateTime.now();
    
    	var daysSincePregnancyStart = (now - _pregnancyStart).Days;

    	// check if pregnancy has actually ended
    	if (daysSincePregnancyStart > PregnancyEndDate.Days)
    	{
       	_pregnancyState = PregnancyState.NotPregnant;
			RestartCycle();
       	return false;
    	}
    	else if (daysSincePregnancyStart == PregnancyEndDate.Days)
    	{
 
       	_cycleState = CycleState.Postpartum;
       	_pregnancyState = PregnancyState.NotPregnant;
       	Random rnd = new Random();
       	PostpartumPeriodLength = rnd.Next(21, avgPostpartumPeriodLength + 21);
       	return false;
    	}
    	else if (_pregnancyState == PregnancyState.MorningSickness && daysSincePregnancyStart < 7 * 4)
    	{
       	// Morning sickness lasts until the end of the first month
       	return true;
    	}
    	else if (daysSincePregnancyStart >= 7 * 4 && daysSincePregnancyStart < 7 * 4 + 7)
    	{
       	// Second month of pregnancy
        	GenerateMorningSickness();
        	return true;
    	}
    	return true;
	}


	public bool FeelsMorningSickness()
	{
   		if (_pregnancyState == PregnancyState.MorningSickness)
    	{
       	Random random = new Random();
			// Generate the time from which nausea might possibly start
        	int nauseaStartSeed = random.Next(0, 11);

        	// Get the current local time
        	DateTime localTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.Local);

        	// Get the time of day
        	TimeSpan timeOfDay = localTime.TimeOfDay;

        	if (timeOfDay >= TimeSpan.FromHours(nauseaStartSeed) && timeOfDay < TimeSpan.FromHours(12))
        	{
          	// Generate probability of true or false
          	int randomNumber = random.Next(0, 100);
        
				// Return whether or not the morning sickness results in nausea
            	return randomNumber <= 75;
        	}
        	else
        	{
          	// Not feeling nauseous
          	return false;
        	}
    	}
    	else
    	{
       	return false;
    	}
}